{"version":3,"sources":["components/Home/HeadingSection/logo.svg","components/shared-components/SectionInfo/glow.svg","components/Home/HeadingSection/line.svg","components/shared-components/Button/index.tsx","components/shared-components/Section/Line/index.tsx","components/shared-components/Section/index.tsx","components/shared-components/StringSpanizy.tsx","components/shared-components/SectionInfo/index.tsx","locale/en.ts","components/Home/HeadingSection/index.tsx","components/Home/index.tsx","serviceWorker.ts","index.tsx","components/App.tsx"],"names":["module","exports","__webpack_require__","p","Button","_ref","_ref$isSecondary","isSecondary","_ref$isOutline","isOutline","_ref$text","text","_ref$onClick","onClick","outlineModifier","secondaryModifier","react_default","a","createElement","className","concat","Line","svg","alt","_ref$className","src","Section","line","children","_ref$hasGlown","hasGlown","hasGlownClass","StringSpanizy","spans","map","item","key","Fragment","SectionInfo","_ref$title","title","_ref$description","description","_ref$isRTL","isRTL","RTLModifier","glowSVG","info","button","HeadingSection","lineSVG","logo","Object","assign","App","Boolean","window","location","hostname","match","ReactDOM","render","Helmet","name","content","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ee86fc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4842777e.svg\";","module.exports = __webpack_public_path__ + \"static/media/glow.20372e4d.svg\";","module.exports = __webpack_public_path__ + \"static/media/line.f1f56529.svg\";","import React from 'react';\r\n\r\nimport './style.scss';\r\n\r\ninterface IProps {\r\n  isSecondary?: boolean,\r\n  isOutline?: boolean,\r\n  text: string,\r\n  onClick?: () => void | null\r\n}\r\n\r\nexport default function Button({ isSecondary = true, isOutline = false, text = '', onClick = ()=>{} }: IProps){\r\n  const outlineModifier = isOutline ? ' button--outline' : '';\r\n  const secondaryModifier = isSecondary ? ' button--secondary' : '';\r\n  return (\r\n    <button\r\n      className={`button${outlineModifier}${secondaryModifier}`}\r\n      onClick={onClick}\r\n    >\r\n      { text }\r\n    </button>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './style.scss';\r\n\r\ninterface IProps {\r\n  svg: string,\r\n  alt: string,\r\n  className?: string,\r\n}\r\n\r\nexport default function Line({ svg, alt, className = '' }: IProps){\r\n  return (\r\n    <img\r\n      className={`line ${className}`}\r\n      src={svg}\r\n      alt={alt}\r\n    />\r\n  );\r\n}","import React from 'react';\r\n\r\nimport './style.scss';\r\nimport Line from './Line';\r\n\r\ninterface IProps {\r\n  line?: string,\r\n  children: React.ReactNode,\r\n  hasGlown?: boolean,\r\n}\r\n\r\nexport default function Section({ line, children, hasGlown = false }: IProps) {\r\n  const hasGlownClass = hasGlown ? ' section--glown' : ''\r\n  return (\r\n    <section className={`section${hasGlownClass}`}>\r\n      <div className=\"section__layout\">\r\n        { children }\r\n      </div>\r\n      { line ? <Line\r\n        className=\"section__line\"\r\n        svg={line}\r\n        alt='svg line'\r\n      /> : null}\r\n    </section>\r\n  );\r\n}","import React from 'react';\r\n\r\ninterface IProps {\r\n  text: string[]\r\n}\r\n\r\nexport default function StringSpanizy({ text = [] }: IProps){\r\n  const spans = text.map(item => <span key={item}>{item}</span>);\r\n  return (\r\n    <React.Fragment>\r\n      { spans }\r\n    </React.Fragment>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport StringSpanizy from '../../shared-components/StringSpanizy';\r\n\r\nimport './style.scss';\r\n\r\nimport glowSVG from './glow.svg';\r\n\r\ninterface IProps {\r\n  title?: string[],\r\n  description?: string[],\r\n  className?: string,\r\n  isRTL?: boolean,\r\n}\r\n\r\nexport default function SectionInfo({ title = [], description = [], className = '', isRTL = false }: IProps){\r\n  const RTLModifier = isRTL ? ' section-info--rtl' : ''\r\n  return (\r\n    <div className={`section-info${RTLModifier} ${className}`}>\r\n      <img\r\n        className=\"section-info__glow\"\r\n        src={glowSVG}\r\n        alt=\"glow\"\r\n      />\r\n      <h2 className=\"section-info__title\">\r\n        <StringSpanizy\r\n          text={title}\r\n        />\r\n      </h2>\r\n      <p className=\"section-info__desc\">\r\n        <StringSpanizy\r\n          text={description}\r\n        />\r\n      </p>\r\n    </div>\r\n  );\r\n}","export const sections: TSections = {\r\n    heading: {\r\n        info: {\r\n            title: ['Artistry', 'done easily'],\r\n            description: ['A Google Docs scam that appears to be widespread began landing in usersâ€™ inboxes on Wednesday in what seemed to be a sophisticated.']\r\n        },\r\n        button: 'Join the beta',\r\n    },\r\n    control: {\r\n        info: {\r\n            title: ['Control the', 'animation'],\r\n            description: ['The reason why businesses make use of mission statements is to make it clear what they look to achieve as an organization']\r\n        },\r\n    },\r\n    fluid: {\r\n        info: {\r\n            title: ['Fluid animation'],\r\n            description: ['A vision statement is a company\\'s road map, indicating what the company wants to become by setting a defined direction for the company\\'s growth.']\r\n        },\r\n        buttons: {\r\n            clickMe: 'Click me',\r\n            hoverMe: 'Hover me',\r\n            selectMe: 'Select me'\r\n        }\r\n    },\r\n    easyAnimation: {\r\n        info: {\r\n            title: ['Easy animation'],\r\n            description: ['The reason why businesses make use of mission statements is to make it clear what they look to achieve as an organization, not only to themselves and their.']\r\n        },\r\n        button: 'Bounce',\r\n    },\r\n    getAhead: {\r\n        info: {\r\n            title: ['Get ahead'],\r\n            description: ['Short text with copy saying something like:', '- short time to get ahead of the others and try something new', '- 1on1 contact with the developers ? (exclusivity marketing)']\r\n        },\r\n        subscribe: {\r\n            placeholder: 'master_artist@gmail.com',\r\n            button: 'Join the beta',\r\n        }\r\n    }\r\n}\r\n\r\nexport const footerSections: TFooterSections = [\r\n    {\r\n        title: 'Title Here',\r\n        description: 'The reason why businesses make use of mission statements is to make it.'\r\n    },\r\n    {\r\n        title: 'Title Here',\r\n        description: 'The reason why businesses make use of mission statements is to make it.'\r\n    },\r\n    {\r\n        title: 'Title Here',\r\n        description: 'The reason why businesses make use of mission statements is to make it.'\r\n    },\r\n    {\r\n        title: 'Title Here',\r\n        description: 'The reason why businesses make use of mission statements is to make it.'\r\n    },\r\n]","import React from 'react';\r\n\r\nimport Button from '../../shared-components/Button';\r\nimport Section from '../../shared-components/Section';\r\n\r\nimport logo from './logo.svg';\r\nimport './style.scss';\r\nimport SectionInfo from '../../shared-components/SectionInfo';\r\n\r\nimport { sections } from '../../../locale/en';\r\n\r\nimport lineSVG from './line.svg';\r\n\r\nconst { info, button } = sections.heading;\r\n\r\nexport default function HeadingSection() {\r\n  return (\r\n    <Section hasGlown line={lineSVG}>\r\n      <div className=\"heading-section\">\r\n        <img\r\n          className=\"heading-section__logo\"\r\n          src={logo}\r\n          alt=\"TheatreJS logo\"\r\n        />\r\n        <SectionInfo\r\n          className=\"heading-section__content\"\r\n          {...info}\r\n        />\r\n        <div className=\"heading-section__action\">\r\n          <Button\r\n            text={button}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Section>\r\n  );\r\n}","import React from 'react'\r\n\r\nimport './style.scss';\r\n\r\nimport HeadingSection from './HeadingSection';\r\n\r\nexport default function App(){\r\n    return (\r\n        <div className=\"app\">\r\n            <HeadingSection />\r\n        </div>\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './stylesheets/main.scss'\r\nimport App from './components/App'\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","import React from 'react'\r\nimport Home from './Home'\r\nimport { Helmet } from 'react-helmet'\r\n\r\nexport default () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet>\r\n                <title>TheatreJS - Web-based animation tool</title>\r\n                <meta name=\"description\" content=\"web-based animation tool\" />\r\n                <meta name=\"keywords\" content=\"animations,js,theatre\" />\r\n            </Helmet>\r\n            <Home />\r\n        </React.Fragment>\r\n    )\r\n};"],"sourceRoot":""}